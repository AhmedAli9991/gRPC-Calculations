// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/calculation.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CalculationService_AggregationObject_FullMethodName                                     = "/calculation.CalculationService/AggregationObject"
	CalculationService_AggregationMaterialData_FullMethodName                               = "/calculation.CalculationService/AggregationMaterialData"
	CalculationService_GroupedMaterialPercentage_FullMethodName                             = "/calculation.CalculationService/GroupedMaterialPercentage"
	CalculationService_MonthlyBreakdown_FullMethodName                                      = "/calculation.CalculationService/MonthlyBreakdown"
	CalculationService_TransactionsObjects_FullMethodName                                   = "/calculation.CalculationService/TransactionsObjects"
	CalculationService_MaterialTransactionScreenData_FullMethodName                         = "/calculation.CalculationService/MaterialTransactionScreenData"
	CalculationService_GetAllTransactionsData_FullMethodName                                = "/calculation.CalculationService/GetAllTransactionsData"
	CalculationService_PaginatedResults_FullMethodName                                      = "/calculation.CalculationService/PaginatedResults"
	CalculationService_BccuScreenTransactionData_FullMethodName                             = "/calculation.CalculationService/BccuScreenTransactionData"
	CalculationService_BccuScreenGetresultObject_FullMethodName                             = "/calculation.CalculationService/BccuScreenGetresultObject"
	CalculationService_BccuScreenAllTransactionData_FullMethodName                          = "/calculation.CalculationService/BccuScreenAllTransactionData"
	CalculationService_SuppliersScreenDataObjects_FullMethodName                            = "/calculation.CalculationService/SuppliersScreenDataObjects"
	CalculationService_SuppliersScreenDatapaginatedData_FullMethodName                      = "/calculation.CalculationService/SuppliersScreenDatapaginatedData"
	CalculationService_MaterialTransactionScreenDatawthgetAllTransactionsNew_FullMethodName = "/calculation.CalculationService/MaterialTransactionScreenDatawthgetAllTransactionsNew"
	CalculationService_MaterialTransactionScreenDatawthpaginatedData_FullMethodName         = "/calculation.CalculationService/MaterialTransactionScreenDatawthpaginatedData"
	CalculationService_WelcomeScreenDatat1_FullMethodName                                   = "/calculation.CalculationService/WelcomeScreenDatat1"
	CalculationService_WelcomeScreenDatat2_FullMethodName                                   = "/calculation.CalculationService/WelcomeScreenDatat2"
)

// CalculationServiceClient is the client API for CalculationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculationServiceClient interface {
	AggregationObject(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	AggregationMaterialData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	GroupedMaterialPercentage(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	MonthlyBreakdown(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	TransactionsObjects(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	MaterialTransactionScreenData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	GetAllTransactionsData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	PaginatedResults(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	BccuScreenTransactionData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	BccuScreenGetresultObject(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	BccuScreenAllTransactionData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	SuppliersScreenDataObjects(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	SuppliersScreenDatapaginatedData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	MaterialTransactionScreenDatawthgetAllTransactionsNew(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	MaterialTransactionScreenDatawthpaginatedData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	WelcomeScreenDatat1(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
	WelcomeScreenDatat2(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error)
}

type calculationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculationServiceClient(cc grpc.ClientConnInterface) CalculationServiceClient {
	return &calculationServiceClient{cc}
}

func (c *calculationServiceClient) AggregationObject(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_AggregationObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) AggregationMaterialData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_AggregationMaterialData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) GroupedMaterialPercentage(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_GroupedMaterialPercentage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) MonthlyBreakdown(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_MonthlyBreakdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) TransactionsObjects(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_TransactionsObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) MaterialTransactionScreenData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_MaterialTransactionScreenData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) GetAllTransactionsData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_GetAllTransactionsData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) PaginatedResults(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_PaginatedResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) BccuScreenTransactionData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_BccuScreenTransactionData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) BccuScreenGetresultObject(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_BccuScreenGetresultObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) BccuScreenAllTransactionData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_BccuScreenAllTransactionData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) SuppliersScreenDataObjects(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_SuppliersScreenDataObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) SuppliersScreenDatapaginatedData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_SuppliersScreenDatapaginatedData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) MaterialTransactionScreenDatawthgetAllTransactionsNew(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_MaterialTransactionScreenDatawthgetAllTransactionsNew_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) MaterialTransactionScreenDatawthpaginatedData(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_MaterialTransactionScreenDatawthpaginatedData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) WelcomeScreenDatat1(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_WelcomeScreenDatat1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationServiceClient) WelcomeScreenDatat2(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculationResponse)
	err := c.cc.Invoke(ctx, CalculationService_WelcomeScreenDatat2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculationServiceServer is the server API for CalculationService service.
// All implementations must embed UnimplementedCalculationServiceServer
// for forward compatibility
type CalculationServiceServer interface {
	AggregationObject(context.Context, *CalculationRequest) (*CalculationResponse, error)
	AggregationMaterialData(context.Context, *CalculationRequest) (*CalculationResponse, error)
	GroupedMaterialPercentage(context.Context, *CalculationRequest) (*CalculationResponse, error)
	MonthlyBreakdown(context.Context, *CalculationRequest) (*CalculationResponse, error)
	TransactionsObjects(context.Context, *CalculationRequest) (*CalculationResponse, error)
	MaterialTransactionScreenData(context.Context, *CalculationRequest) (*CalculationResponse, error)
	GetAllTransactionsData(context.Context, *CalculationRequest) (*CalculationResponse, error)
	PaginatedResults(context.Context, *CalculationRequest) (*CalculationResponse, error)
	BccuScreenTransactionData(context.Context, *CalculationRequest) (*CalculationResponse, error)
	BccuScreenGetresultObject(context.Context, *CalculationRequest) (*CalculationResponse, error)
	BccuScreenAllTransactionData(context.Context, *CalculationRequest) (*CalculationResponse, error)
	SuppliersScreenDataObjects(context.Context, *CalculationRequest) (*CalculationResponse, error)
	SuppliersScreenDatapaginatedData(context.Context, *CalculationRequest) (*CalculationResponse, error)
	MaterialTransactionScreenDatawthgetAllTransactionsNew(context.Context, *CalculationRequest) (*CalculationResponse, error)
	MaterialTransactionScreenDatawthpaginatedData(context.Context, *CalculationRequest) (*CalculationResponse, error)
	WelcomeScreenDatat1(context.Context, *CalculationRequest) (*CalculationResponse, error)
	WelcomeScreenDatat2(context.Context, *CalculationRequest) (*CalculationResponse, error)
	mustEmbedUnimplementedCalculationServiceServer()
}

// UnimplementedCalculationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculationServiceServer struct {
}

func (UnimplementedCalculationServiceServer) AggregationObject(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregationObject not implemented")
}
func (UnimplementedCalculationServiceServer) AggregationMaterialData(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregationMaterialData not implemented")
}
func (UnimplementedCalculationServiceServer) GroupedMaterialPercentage(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupedMaterialPercentage not implemented")
}
func (UnimplementedCalculationServiceServer) MonthlyBreakdown(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonthlyBreakdown not implemented")
}
func (UnimplementedCalculationServiceServer) TransactionsObjects(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsObjects not implemented")
}
func (UnimplementedCalculationServiceServer) MaterialTransactionScreenData(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialTransactionScreenData not implemented")
}
func (UnimplementedCalculationServiceServer) GetAllTransactionsData(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransactionsData not implemented")
}
func (UnimplementedCalculationServiceServer) PaginatedResults(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginatedResults not implemented")
}
func (UnimplementedCalculationServiceServer) BccuScreenTransactionData(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BccuScreenTransactionData not implemented")
}
func (UnimplementedCalculationServiceServer) BccuScreenGetresultObject(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BccuScreenGetresultObject not implemented")
}
func (UnimplementedCalculationServiceServer) BccuScreenAllTransactionData(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BccuScreenAllTransactionData not implemented")
}
func (UnimplementedCalculationServiceServer) SuppliersScreenDataObjects(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuppliersScreenDataObjects not implemented")
}
func (UnimplementedCalculationServiceServer) SuppliersScreenDatapaginatedData(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuppliersScreenDatapaginatedData not implemented")
}
func (UnimplementedCalculationServiceServer) MaterialTransactionScreenDatawthgetAllTransactionsNew(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialTransactionScreenDatawthgetAllTransactionsNew not implemented")
}
func (UnimplementedCalculationServiceServer) MaterialTransactionScreenDatawthpaginatedData(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialTransactionScreenDatawthpaginatedData not implemented")
}
func (UnimplementedCalculationServiceServer) WelcomeScreenDatat1(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WelcomeScreenDatat1 not implemented")
}
func (UnimplementedCalculationServiceServer) WelcomeScreenDatat2(context.Context, *CalculationRequest) (*CalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WelcomeScreenDatat2 not implemented")
}
func (UnimplementedCalculationServiceServer) mustEmbedUnimplementedCalculationServiceServer() {}

// UnsafeCalculationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculationServiceServer will
// result in compilation errors.
type UnsafeCalculationServiceServer interface {
	mustEmbedUnimplementedCalculationServiceServer()
}

func RegisterCalculationServiceServer(s grpc.ServiceRegistrar, srv CalculationServiceServer) {
	s.RegisterService(&CalculationService_ServiceDesc, srv)
}

func _CalculationService_AggregationObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).AggregationObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_AggregationObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).AggregationObject(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_AggregationMaterialData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).AggregationMaterialData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_AggregationMaterialData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).AggregationMaterialData(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_GroupedMaterialPercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).GroupedMaterialPercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_GroupedMaterialPercentage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).GroupedMaterialPercentage(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_MonthlyBreakdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).MonthlyBreakdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_MonthlyBreakdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).MonthlyBreakdown(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_TransactionsObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).TransactionsObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_TransactionsObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).TransactionsObjects(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_MaterialTransactionScreenData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).MaterialTransactionScreenData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_MaterialTransactionScreenData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).MaterialTransactionScreenData(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_GetAllTransactionsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).GetAllTransactionsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_GetAllTransactionsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).GetAllTransactionsData(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_PaginatedResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).PaginatedResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_PaginatedResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).PaginatedResults(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_BccuScreenTransactionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).BccuScreenTransactionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_BccuScreenTransactionData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).BccuScreenTransactionData(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_BccuScreenGetresultObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).BccuScreenGetresultObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_BccuScreenGetresultObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).BccuScreenGetresultObject(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_BccuScreenAllTransactionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).BccuScreenAllTransactionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_BccuScreenAllTransactionData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).BccuScreenAllTransactionData(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_SuppliersScreenDataObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).SuppliersScreenDataObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_SuppliersScreenDataObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).SuppliersScreenDataObjects(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_SuppliersScreenDatapaginatedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).SuppliersScreenDatapaginatedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_SuppliersScreenDatapaginatedData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).SuppliersScreenDatapaginatedData(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_MaterialTransactionScreenDatawthgetAllTransactionsNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).MaterialTransactionScreenDatawthgetAllTransactionsNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_MaterialTransactionScreenDatawthgetAllTransactionsNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).MaterialTransactionScreenDatawthgetAllTransactionsNew(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_MaterialTransactionScreenDatawthpaginatedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).MaterialTransactionScreenDatawthpaginatedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_MaterialTransactionScreenDatawthpaginatedData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).MaterialTransactionScreenDatawthpaginatedData(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_WelcomeScreenDatat1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).WelcomeScreenDatat1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_WelcomeScreenDatat1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).WelcomeScreenDatat1(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculationService_WelcomeScreenDatat2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).WelcomeScreenDatat2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculationService_WelcomeScreenDatat2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).WelcomeScreenDatat2(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalculationService_ServiceDesc is the grpc.ServiceDesc for CalculationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculation.CalculationService",
	HandlerType: (*CalculationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggregationObject",
			Handler:    _CalculationService_AggregationObject_Handler,
		},
		{
			MethodName: "AggregationMaterialData",
			Handler:    _CalculationService_AggregationMaterialData_Handler,
		},
		{
			MethodName: "GroupedMaterialPercentage",
			Handler:    _CalculationService_GroupedMaterialPercentage_Handler,
		},
		{
			MethodName: "MonthlyBreakdown",
			Handler:    _CalculationService_MonthlyBreakdown_Handler,
		},
		{
			MethodName: "TransactionsObjects",
			Handler:    _CalculationService_TransactionsObjects_Handler,
		},
		{
			MethodName: "MaterialTransactionScreenData",
			Handler:    _CalculationService_MaterialTransactionScreenData_Handler,
		},
		{
			MethodName: "GetAllTransactionsData",
			Handler:    _CalculationService_GetAllTransactionsData_Handler,
		},
		{
			MethodName: "PaginatedResults",
			Handler:    _CalculationService_PaginatedResults_Handler,
		},
		{
			MethodName: "BccuScreenTransactionData",
			Handler:    _CalculationService_BccuScreenTransactionData_Handler,
		},
		{
			MethodName: "BccuScreenGetresultObject",
			Handler:    _CalculationService_BccuScreenGetresultObject_Handler,
		},
		{
			MethodName: "BccuScreenAllTransactionData",
			Handler:    _CalculationService_BccuScreenAllTransactionData_Handler,
		},
		{
			MethodName: "SuppliersScreenDataObjects",
			Handler:    _CalculationService_SuppliersScreenDataObjects_Handler,
		},
		{
			MethodName: "SuppliersScreenDatapaginatedData",
			Handler:    _CalculationService_SuppliersScreenDatapaginatedData_Handler,
		},
		{
			MethodName: "MaterialTransactionScreenDatawthgetAllTransactionsNew",
			Handler:    _CalculationService_MaterialTransactionScreenDatawthgetAllTransactionsNew_Handler,
		},
		{
			MethodName: "MaterialTransactionScreenDatawthpaginatedData",
			Handler:    _CalculationService_MaterialTransactionScreenDatawthpaginatedData_Handler,
		},
		{
			MethodName: "WelcomeScreenDatat1",
			Handler:    _CalculationService_WelcomeScreenDatat1_Handler,
		},
		{
			MethodName: "WelcomeScreenDatat2",
			Handler:    _CalculationService_WelcomeScreenDatat2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calculation.proto",
}
